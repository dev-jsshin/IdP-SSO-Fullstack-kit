{
	"info": {
		"_postman_id": "ef4e31f9-2981-41df-905a-f48eb1cc395c",
		"name": "IdP-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32727405"
	},
	"item": [
		{
			"name": "1. 사용자 로그인",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8443/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Authorization_Code 발급",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7555/oauth2/authorize?response_type=code&client_id=web-app&scope=openid&redirect_uri=https://oauth.pstmn.io/v1/callback&state=ssssttttaaaatttee",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7555",
					"path": [
						"oauth2",
						"authorize"
					],
					"query": [
						{
							"key": "response_type",
							"value": "code"
						},
						{
							"key": "client_id",
							"value": "web-app"
						},
						{
							"key": "scope",
							"value": "openid"
						},
						{
							"key": "redirect_uri",
							"value": "https://oauth.pstmn.io/v1/callback"
						},
						{
							"key": "state",
							"value": "ssssttttaaaatttee"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3-1. Token 발급 (client_secret_basic)",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "secretpassword123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "web-app",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "https://oauth.pstmn.io/v1/callback",
							"type": "text"
						},
						{
							"key": "code",
							"value": "CdHWjEKTbz5lVuLM5IB1KK2wX7wZcjsEaj9n9r0uxpoxkaROJ-tR4eezbCXSOROmN8pHQpDiMfYJTfbYaOWkjpH544FxN2oRtSIDAITMc923DeNsAdqThS6rGn5S8De-",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:7555/oauth2/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7555",
					"path": [
						"oauth2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-2. Token 발급 (client_secret_jwt)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(async () => {\r",
							"    // --- 사용자 제공 정보 ---\r",
							"    const clientId = pm.environment.get(\"clientId\") || \"web-app\"; // 환경 변수 우선 사용\r",
							"    const clientSecret = pm.environment.get(\"clientSecret\") || \"T4h1sIsMyV3ryL0ngAndS3cur3Cl1entS3cr3tP@ssw0rd!\";\r",
							"    const tokenEndpointUrl = pm.environment.get(\"tokenEndpointUrl\") || \"http://localhost:8443/oauth2/token\";\r",
							"    const algorithm = { name: \"HMAC\", hash: \"SHA-256\" }; // Web Crypto API용 알고리즘 객체\r",
							"    const jwtHeader = { \"alg\": \"HS256\", \"typ\": \"JWT\" };   // JWT 헤더 (알고리즘 이름은 문자열 유지)\r",
							"    // ---------------------\r",
							"\r",
							"    // JWT Payload 생성\r",
							"    const nowSeconds = Math.floor(Date.now() / 1000);\r",
							"    const expSeconds = nowSeconds + (5 * 60); // 5분 후 만료 (초 단위)\r",
							"    const jwtId = uuidv4(); // 고유 ID 생성 (아래 uuidv4 함수 필요)\r",
							"\r",
							"    const payload = {\r",
							"      \"iss\": clientId,          // Issuer: 클라이언트 ID\r",
							"      \"sub\": clientId,          // Subject: 클라이언트 ID\r",
							"      \"aud\": tokenEndpointUrl,  // Audience: 토큰 엔드포인트 URL\r",
							"      \"jti\": jwtId,             // JWT ID: 고유 식별자\r",
							"      \"iat\": nowSeconds,        // Issued At: 발급 시간 (선택 사항)\r",
							"      \"exp\": expSeconds         // Expiration Time: 만료 시간 (필수)\r",
							"    };\r",
							"\r",
							"    // ArrayBuffer를 Base64URL 문자열로 인코딩하는 함수\r",
							"    function arrayBufferToBase64Url(buffer) {\r",
							"        const uint8Array = new Uint8Array(buffer);\r",
							"        let binaryString = '';\r",
							"        uint8Array.forEach(byte => {\r",
							"            binaryString += String.fromCharCode(byte);\r",
							"        });\r",
							"        const base64 = btoa(binaryString); // 표준 Base64 인코딩\r",
							"        // Base64를 Base64URL로 변환: +, / 를 -, _ 로 바꾸고, 패딩(=) 제거\r",
							"        return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r",
							"    }\r",
							"\r",
							"    // UUID v4 생성 함수 (Postman에서 사용 가능)\r",
							"    function uuidv4() {\r",
							"      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
							"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r",
							"        return v.toString(16);\r",
							"      });\r",
							"    }\r",
							"\r",
							"    try {\r",
							"        // --- 1. Header와 Payload 인코딩 ---\r",
							"        // JSON 문자열을 UTF-8 ArrayBuffer로 변환 후 Base64URL 인코딩\r",
							"        const encodedHeader = arrayBufferToBase64Url(new TextEncoder().encode(JSON.stringify(jwtHeader)));\r",
							"        const encodedPayload = arrayBufferToBase64Url(new TextEncoder().encode(JSON.stringify(payload)));\r",
							"\r",
							"        // --- 2. 서명할 데이터 준비 ---\r",
							"        const dataToSign = `${encodedHeader}.${encodedPayload}`;\r",
							"        const dataToSignBuffer = new TextEncoder().encode(dataToSign); // 서명할 데이터를 ArrayBuffer로\r",
							"\r",
							"        // --- 3. 서명 키(clientSecret) 준비 ---\r",
							"        // clientSecret 문자열을 ArrayBuffer로 변환하고 CryptoKey로 임포트\r",
							"        const key = await crypto.subtle.importKey(\r",
							"            \"raw\",                           // 키 형식: 바이트 시퀀스\r",
							"            new TextEncoder().encode(clientSecret), // 키 데이터 (UTF-8 인코딩된 바이트)\r",
							"            algorithm,                       // 사용할 알고리즘 (HMAC/SHA-256)\r",
							"            false,                           // 키 추출 가능 여부 (false)\r",
							"            [\"sign\"]                         // 키 용도: 서명용\r",
							"        );\r",
							"\r",
							"        // --- 4. 데이터 서명 ---\r",
							"        // 준비된 키와 데이터로 서명 실행 (결과는 ArrayBuffer)\r",
							"        const signatureBuffer = await crypto.subtle.sign(\r",
							"            algorithm.name, // 알고리즘 이름 (HMAC)\r",
							"            key,            // 임포트된 CryptoKey\r",
							"            dataToSignBuffer // 서명할 데이터 (ArrayBuffer)\r",
							"        );\r",
							"\r",
							"        // --- 5. 서명 결과 인코딩 ---\r",
							"        // 서명 결과 ArrayBuffer를 Base64URL 문자열로 변환\r",
							"        const encodedSignature = arrayBufferToBase64Url(signatureBuffer);\r",
							"\r",
							"        // --- 6. 최종 JWT 생성 ---\r",
							"        const jwtAssertion = `${dataToSign}.${encodedSignature}`;\r",
							"\r",
							"        // 생성된 JWT를 Postman Collection 변수로 설정\r",
							"        pm.collectionVariables.set(\"generatedClientAssertion\", jwtAssertion);\r",
							"        console.log(\"JWT Assertion generated successfully using Web Crypto API.\", jwtAssertion);\r",
							"\r",
							"    } catch (error) {\r",
							"        console.error(\"Error generating JWT assertion using Web Crypto API:\", error);\r",
							"        // 오류 발생 시 변수 설정을 취소하거나 오류 상태를 표시할 수 있습니다.\r",
							"        pm.collectionVariables.unset(\"generatedClientAssertion\");\r",
							"    }\r",
							"\r",
							"})(); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "http://localhost:8444/callback",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "web-app",
							"type": "text"
						},
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{generatedClientAssertion}}",
							"type": "text"
						},
						{
							"key": "code",
							"value": "kNQhqmP3qo1ohvJDxXbDVcO5FQBuhIenpAm9ds5rPkMW1vj-xoTDrn9Kn_JOdFaZXRv60i3KjvWjhpQWuVowDpUWPJkE57i_7zytAFqGFqJY-Al9J3O_8U6kDC2b5teT",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8443/oauth2/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"oauth2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-3. Token 발급 (client_secret_post)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "web-app",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "https://oauth.pstmn.io/v1/callback",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid",
							"type": "text"
						},
						{
							"key": "code",
							"value": "kNQhqmP3qo1ohvJDxXbDVcO5FQBuhIenpAm9ds5rPkMW1vj-xoTDrn9Kn_JOdFaZXRv60i3KjvWjhpQWuVowDpUWPJkE57i_7zytAFqGFqJY-Al9J3O_8U6kDC2b5teT",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "T4h1sIsMyV3ryL0ngAndS3cur3Cl1entS3cr3tP@ssw0rd!",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:7555/oauth2/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7555",
					"path": [
						"oauth2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Token 검사",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "T4h1sIsMyV3ryL0ngAndS3cur3Cl1entS3cr3tP@ssw0rd!",
							"type": "string"
						},
						{
							"key": "username",
							"value": "web-app",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "token",
							"value": "eyJraWQiOiJkMjgzMTZkYi00ZmNjLTQyOGItOTMyMS0zYWZmN2QxZjNiMjciLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6IndlYi1hcHAiLCJhenAiOiJ3ZWItYXBwIiwiYXV0aF90aW1lIjoxNzQ1MjIxODA5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0Ojc1NTUiLCJleHAiOjE3NDUyMjM2NzUsImlhdCI6MTc0NTIyMTg3NSwianRpIjoiOGFlYWJlYTctZjAwZi00MDBhLTkyNjItMzQ5OWQ5ZWJlYzIwIiwic2lkIjoickFQVGt0TlczSmRIOGlJRkNHWUxUMmh3Q0tMSG42Y0ZQY201MkV3N1BCMCJ9.dgBo5TYpB9MpySWy6iz7CBgBIMyc39bPMWDg2Sj1VTuGLBMlf75js0fM2JoBDsK-aS6EnQuidQn9P0sX75_qXvc5haSOdXsOFOAgA1g0bj6AbUMX_aOVnf0ii8KPRi5jl1NCq9A7YJNVjgs65nbRoqDCbVE-kDfNyuzfEp2x3BSpkqpMWqGDWfvbPeMt2H5ExOBg-hCNKynaxK9_AbC7sAQvC1WpvehlxGKHKQJ4Vr2wDx8OTAifZIEAtfM0_DLrOjOT1d8I9tPz5p1zW-M3-n-jAhS6iB1OzBJD9aoisoJ_JlCZ-F4CAM9KASW49QqBk6UTqAb58toAIbnoPF7ylA",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8443/oauth2/introspect",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"oauth2",
						"introspect"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Token 폐기",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "T4h1sIsMyV3ryL0ngAndS3cur3Cl1entS3cr3tP@ssw0rd!",
							"type": "string"
						},
						{
							"key": "username",
							"value": "web-app",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "token",
							"value": "eyJraWQiOiI5MDUyN2JkMy0xNGNkLTRjMDktOWJkMS01ZmE0YTY4NDlhM2MiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6IndlYi1hcHAiLCJuYmYiOjE3NDQ3Njc0NDQsInNjb3BlIjpbIm9wZW5pZCJdLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0Ojc1NTUiLCJleHAiOjE3NDQ3NzEwNDQsImlhdCI6MTc0NDc2NzQ0NCwianRpIjoiMzk2MzM3ZmUtZDkzMi00MjhjLThlODgtYjQwNzhhNWRiNDcyIn0.h9wP88RLtRGHvf8PBc6ycosB5s9mg0T3Nek2o9_fMNe2BlYm5lBNJv0QsEcNwkge2ZmgkWNoTAzCqrfbhy31zOQqkxCRFmDn_pa6tLPv3mz32Q6I2MaZo_kDpcIq1_TUtlLrwobcNg2gZS-nIm5_OmMI6qYZWRhW5KPntSA3RUKEaY4s7WDKj0XofobFTnKJdDsCO7XfhoBNeRQcz4Nb9oe3RSxRrx6JB9hypupSRUBgm7C-jMFp4rWSdwyRHfUVjCQvT9Ti3vWREOexKW0mm-bgWH3O7TXrHpbRmx8FaVkEbcaR7wEgqxTPhGxeFGCSJl8wTIwJXI8SKjPS3iPQwg",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8443/oauth2/revoke",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"oauth2",
						"revoke"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. 사용자 로그아웃",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7555/connect/logout?state=ssssttttaaaatttee&post_logout_redirect_uri=https://google.com&id_token_hint=eyJraWQiOiI5MDUyN2JkMy0xNGNkLTRjMDktOWJkMS01ZmE0YTY4NDlhM2MiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6IndlYi1hcHAiLCJhenAiOiJ3ZWItYXBwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo3NTU1IiwiZXhwIjoxNzQ0NzY0NDgyLCJpYXQiOjE3NDQ3NjI2ODIsImp0aSI6ImU4YjMyNzdhLTljNDQtNGVhNS1hNzY3LWU3YTcwNWUyZGQwNyIsInNpZCI6IlRiYkNjYm1zMHVyQjBhcHUwWlc2RHFncHd5X0pZVktTRnpFNWJ1OXBLQkEifQ.NA2eJ50brqAOb-4lYm4GK9jYWylMw_O4maf1qeA9sVaAY8YlLZKYC_WoDTVo-mgfaTpVHQIYDzaY5uMcwJbKk4-2JHG4Q_3dvA56GFcqMJUXTuz0dvgrq8Al63CgBBdzf6iMRrjsqjItmi_vno0LeUg2tt1gOfWzPEXc3kKAgDtyukxFsOfsHSy1AtjYE1dPsFKqyeLlevm_bbUku9xHz100xyPM8ZE3At-hbR6F9l6WWwtw7zFMHLZSUN-TZ5zal5rS10tXlH7Qrx3BOm5NVFlVPFBtbd6W2vWV1wMEpEyPS1yK-y5tKBre5TBRKth8hEt3TSYriUQqHREXIyS8NQ",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7555",
					"path": [
						"connect",
						"logout"
					],
					"query": [
						{
							"key": "state",
							"value": "ssssttttaaaatttee"
						},
						{
							"key": "post_logout_redirect_uri",
							"value": "https://google.com"
						},
						{
							"key": "id_token_hint",
							"value": "eyJraWQiOiI5MDUyN2JkMy0xNGNkLTRjMDktOWJkMS01ZmE0YTY4NDlhM2MiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6IndlYi1hcHAiLCJhenAiOiJ3ZWItYXBwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo3NTU1IiwiZXhwIjoxNzQ0NzY0NDgyLCJpYXQiOjE3NDQ3NjI2ODIsImp0aSI6ImU4YjMyNzdhLTljNDQtNGVhNS1hNzY3LWU3YTcwNWUyZGQwNyIsInNpZCI6IlRiYkNjYm1zMHVyQjBhcHUwWlc2RHFncHd5X0pZVktTRnpFNWJ1OXBLQkEifQ.NA2eJ50brqAOb-4lYm4GK9jYWylMw_O4maf1qeA9sVaAY8YlLZKYC_WoDTVo-mgfaTpVHQIYDzaY5uMcwJbKk4-2JHG4Q_3dvA56GFcqMJUXTuz0dvgrq8Al63CgBBdzf6iMRrjsqjItmi_vno0LeUg2tt1gOfWzPEXc3kKAgDtyukxFsOfsHSy1AtjYE1dPsFKqyeLlevm_bbUku9xHz100xyPM8ZE3At-hbR6F9l6WWwtw7zFMHLZSUN-TZ5zal5rS10tXlH7Qrx3BOm5NVFlVPFBtbd6W2vWV1wMEpEyPS1yK-y5tKBre5TBRKth8hEt3TSYriUQqHREXIyS8NQ"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "generatedClientAssertion",
			"value": ""
		}
	]
}